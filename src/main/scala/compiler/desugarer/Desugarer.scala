package compiler.desugarer

import compiler.irs.Asts.*
import compiler.{AnalysisContext, CompilerStep, FunctionsToInject}
import lang.Operator.*
import lang.Operators
import lang.Types.PrimitiveType.*
import lang.Types.{ArrayType, UndefinedType}

/**
 * Desugaring replaces:
 *  - `>`, `>=` ---> reversed
 *  - `x <= y` ---> `(x < y) || (x == y)`
 *  - `x != y` ---> `!(x == y)`
 *  - `VarModif`: `x += y` ---> `x = x + y`
 *  - `for` ---> `while`
 *  - `-x` ---> `0 - x`
 *  - `!x` ---> `when x then false else true`
 *  - `x && y` ---> `when x then y else false`
 *  - `x || y` ---> `when x then true else y`
 *  - `[x_1, ... , x_n]` ---> `val $0 = arr Int[n]; $0[0] = x_1; ... ; $0[n-1] = x_n; $0`
 */
final class Desugarer extends CompilerStep[(List[Source], AnalysisContext), (List[Source], AnalysisContext)] {
  private val uniqueIdGenerator = new UniqueIdGenerator()
  
  /*
  * =========================================================================
  * IMPORTANT: recursive calls to desugar(...) must be performed everywhere,
  * including on ASTs generated by another call to desugar (some expressions, 
  * e.g. `x >= y`, take several steps to be completely desugared)
  * =========================================================================
  */

  override def apply(input: (List[Source], AnalysisContext)): (List[Source], AnalysisContext) = {
    val (sources, ctx) = input
    val desugaredSources = sources.map(desugar(_)(ctx))
    desugaredSources.foreach(_.assertAllTypesAreSet())
    (desugaredSources, ctx)
  }

  private def desugar(src: Source)(implicit ctx: AnalysisContext): Source = Source(src.defs.map(desugar)).setName(src.getName)

  private def desugar(block: Block)(implicit ctx: AnalysisContext): Block = Block(block.stats.map(desugar))

  private def desugar(funDef: FunDef)(implicit ctx: AnalysisContext): FunDef = {
    // do not desugar preconditions and postconditions
    val Block(bodyStats) = desugar(funDef.body)
    val newBodyStats = funDef.precond.map(Assertion(_, isAssumed = true)) ++ bodyStats ++ funDef.postcond.map(Assertion(_))
    FunDef(funDef.funName, funDef.params.map(desugar), funDef.optRetType, Block(newBodyStats), funDef.precond, funDef.postcond)
  }

  private def desugar(structDef: StructDef)(implicit ctx: AnalysisContext): StructDef = {
    StructDef(structDef.structName, structDef.fields.map(desugar))
  }

  private def desugar(param: Param)(implicit ctx: AnalysisContext): Param = param

  private def desugar(localDef: LocalDef)(implicit ctx: AnalysisContext): LocalDef =
    LocalDef(localDef.localName, localDef.optType, desugar(localDef.rhs), localDef.isReassignable)

  private def desugar(varAssig: VarAssig)(implicit ctx: AnalysisContext): VarAssig = VarAssig(desugar(varAssig.lhs), desugar(varAssig.rhs))

  private def desugar(varModif: VarModif)(implicit ctx: AnalysisContext): VarAssig = {
    val VarModif(lhs, rhs, op) = varModif
    val desugaredLhs = desugar(lhs)
    val desugaredRhs = desugar(rhs)
    VarAssig(desugaredLhs, BinaryOp(desugaredLhs, op, desugaredRhs).setType(lhs.getType))
  }

  private def desugar(ifThenElse: IfThenElse)(implicit ctx: AnalysisContext): IfThenElse = {
    IfThenElse(desugar(ifThenElse.cond), desugar(ifThenElse.thenBr), ifThenElse.elseBrOpt.map(desugar))
  }

  private def desugar(whileLoop: WhileLoop)(implicit ctx: AnalysisContext): WhileLoop = {
    WhileLoop(desugar(whileLoop.cond), desugar(whileLoop.body), whileLoop.invariants)
  }

  private def desugar(forLoop: ForLoop)(implicit ctx: AnalysisContext): Block = {
    val body = Block(
      forLoop.body.stats ++ forLoop.stepStats
    )
    val stats: List[Statement] = forLoop.initStats :+ WhileLoop(forLoop.cond, body, forLoop.invariants)
    desugar(Block(stats))
  }

  private def desugar(returnStat: ReturnStat)(implicit ctx: AnalysisContext): ReturnStat =
    ReturnStat(returnStat.optVal.map(desugar))

  private def desugar(panicStat: PanicStat)(implicit ctx: AnalysisContext): PanicStat =
    PanicStat(desugar(panicStat.msg))

  private def desugar(expr: Expr)(implicit ctx: AnalysisContext): Expr = {
    val desugared = expr match {
      case literal: Literal => literal
      case varRef: VariableRef => varRef
      case indexing: Indexing => Indexing(desugar(indexing.indexed), desugar(indexing.arg))
      case arrayInit: ArrayInit => ArrayInit(arrayInit.elemType, desugar(arrayInit.size))
      case structInit: StructInit => StructInit(structInit.structName, structInit.args.map(desugar))

      case Call(callee@VariableRef(name), args) =>
        val funInfo = ctx.functions(name)
        val desugaredCall = Call(desugar(callee), args.map(desugar))
        if (funInfo.precond.isEmpty && funInfo.postcond.isEmpty){
          desugaredCall
        } else if (funInfo.postcond.isEmpty) {
          Sequence(funInfo.precond.map(Assertion(_)), desugaredCall)
        } else {
          val uid = uniqueIdGenerator.next()
          // TODO rename params -> arg in pre and post conditions (probably do a method in FunDef)
          // TODO remove invar or treat it
          Sequence(
            funInfo.precond.map(Assertion(_)) ++
              List(LocalDef(uid, Some(funInfo.sig.retType), desugaredCall, isReassignable = false)) ++
              funInfo.postcond.map(Assertion(_, isAssumed = true)),
            VariableRef(uid).setType(funInfo.sig.retType)
          )
        }

      
      // [x_1, ... , x_n] ---> explicit assignments
      case filledArrayInit@FilledArrayInit(arrayElems) =>
        val arrayType = filledArrayInit.getType.asInstanceOf[ArrayType]
        val elemType = arrayType.elemType
        val arrValId = uniqueIdGenerator.next()
        val arrValRef = VariableRef(arrValId).setType(arrayType)
        val arrInit = ArrayInit(elemType, IntLit(arrayElems.size)).setType(filledArrayInit.getType)
        val arrayValDefinition = LocalDef(arrValId, Some(arrayType), arrInit, isReassignable = false)
        val arrElemAssigStats = arrayElems.map(desugar).zipWithIndex.map {
          (elem, idx) => VarAssig(Indexing(arrValRef, IntLit(idx)).setType(UndefinedType), elem)
        }
        Sequence(arrayValDefinition :: arrElemAssigStats, arrValRef)
        
      case UnaryOp(operator, operand) =>
        val desugaredOperand = desugar(operand)
        operator match {
          case Minus if operand.getType == IntType => BinaryOp(IntLit(0), Minus, desugaredOperand)
          case Minus if operand.getType == DoubleType => BinaryOp(DoubleLit(0.0), Minus, desugaredOperand)
          case ExclamationMark => Ternary(desugaredOperand, BoolLit(false), BoolLit(true))
          case _ => UnaryOp(operator, desugaredOperand)
        }

      case BinaryOp(lhs, Equality, rhs) if lhs.getType == StringType => {
        val desugaredLhs = desugar(lhs)
        val desugaredRhs = desugar(rhs)
        Call(
          VariableRef(FunctionsToInject.stringEqualityMethodName).setType(UndefinedType),
          List(desugaredLhs, desugaredRhs)
        ).setType(BoolType)
      }
        
      case binaryOp: BinaryOp => {
        val desugaredLhs = desugar(binaryOp.lhs)
        val desugaredRhs = desugar(binaryOp.rhs)
        binaryOp.operator match {
          
          // x <= y ---> x <= y || x == y
          case LessOrEq => desugar(BinaryOp(
            BinaryOp(desugaredLhs, LessThan, desugaredRhs).setType(BoolType),
            Or,
            BinaryOp(desugaredLhs, Equality, desugaredRhs).setType(BoolType)
          ))
          
          // x > y ---> y < x  (and similar with >=)
          case GreaterThan => desugar(BinaryOp(desugaredRhs, LessThan, desugaredLhs))
          case GreaterOrEq => desugar(BinaryOp(desugaredRhs, LessOrEq, desugaredLhs))
          
          // x != y ---> !(x == y)
          case Inequality =>
            desugar(UnaryOp(ExclamationMark,
              BinaryOp(desugaredLhs, Equality, desugaredRhs).setType(BoolType)
            ).setType(BoolType))
            
          // x && y ---> when x then y else false
          case And => desugar(Ternary(desugaredLhs, desugaredRhs, BoolLit(false)))
          
          // x || y ---> when x then true else y
          case Or => desugar(Ternary(desugaredLhs, BoolLit(true), desugaredRhs))
          
          // nothing to desugar at top-level, only perform recursive calls
          case _ => BinaryOp(desugaredLhs, binaryOp.operator, desugaredRhs)
        }
      }
      case select: Select => Select(desugar(select.lhs), select.selected)

      // need to treat separately the case where one of the branches does not return (o.w. Java ASM crashes)
      case Ternary(cond, thenBr, elseBr) if thenBr.getType == NothingType || elseBr.getType == NothingType => {
        val valName = uniqueIdGenerator.next()
        if (thenBr.getType == NothingType){
          val ifStat = IfThenElse(cond, thenBr, None)
          desugar(Sequence(List(ifStat), elseBr))
        } else {
          val ifStat = IfThenElse(UnaryOp(ExclamationMark, cond).setType(BoolType), elseBr, None)
          desugar(Sequence(List(ifStat), thenBr))
        }
      }
      case Ternary(cond, thenBr, elseBr) => Ternary(desugar(cond), desugar(thenBr), desugar(elseBr))
      case Cast(expr, tpe) => Cast(desugar(expr), tpe)
      case Sequence(stats, expr) => Sequence(stats.map(desugar), desugar(expr))
    }
    desugared.setTypeOpt(expr.getTypeOpt)
  }

  private def desugar(statement: Statement)(implicit ctx: AnalysisContext): Statement = {
    // call appropriate method for each type of statement
    statement match
      case expr: Expr => desugar(expr)
      case block: Block => desugar(block)
      case localDef: LocalDef => desugar(localDef)
      case varAssig: VarAssig => desugar(varAssig)
      case varModif: VarModif => desugar(varModif)
      case ifThenElse: IfThenElse => desugar(ifThenElse)
      case whileLoop: WhileLoop => desugar(whileLoop)
      case forLoop: ForLoop => desugar(forLoop)
      case returnStat: ReturnStat => desugar(returnStat)
      case panicStat: PanicStat => desugar(panicStat)
      case assertion: Assertion => assertion  // do not desugar assertions
  }

  private def desugar(topLevelDef: TopLevelDef)(implicit ctx: AnalysisContext): TopLevelDef = {
    topLevelDef match
      case funDef: FunDef => desugar(funDef)
      case structDef: StructDef => desugar(structDef)
  }

}
